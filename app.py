import streamlit as st
import pandas as pd
import requests
from bs4 import BeautifulSoup
import bcrypt
import json
import os
from concurrent.futures import ThreadPoolExecutor

# ==============================
# CONFIG
BASE_URL = "https://hsctvn.com"
PROVINCES = {
    "An Giang": "an-giang", "B√† R·ªãa - V≈©ng T√†u": "ba-ria-vung-tau", "B·∫°c Li√™u": "bac-lieu",
    "B·∫Øc Giang": "bac-giang", "B·∫Øc K·∫°n": "bac-kan", "B·∫Øc Ninh": "bac-ninh", "B·∫øn Tre": "ben-tre",
    "B√¨nh D∆∞∆°ng": "binh-duong", "B√¨nh ƒê·ªãnh": "binh-dinh", "B√¨nh Ph∆∞·ªõc": "binh-phuoc",
    "B√¨nh Thu·∫≠n": "binh-thuan", "C√† Mau": "ca-mau", "C·∫ßn Th∆°": "can-tho", "Cao B·∫±ng": "cao-bang",
    "ƒê√† N·∫µng": "da-nang", "ƒê·∫Øk L·∫Øk": "dak-lak", "ƒê·∫Øk N√¥ng": "dak-nong", "ƒêi·ªán Bi√™n": "dien-bien",
    "ƒê·ªìng Nai": "dong-nai", "ƒê·ªìng Th√°p": "dong-thap", "Gia Lai": "gia-lai", "H√† Giang": "ha-giang",
    "H√† Nam": "ha-nam", "H√† N·ªôi": "ha-noi", "H√† Tƒ©nh": "ha-tinh", "H·∫£i D∆∞∆°ng": "hai-duong",
    "H·∫£i Ph√≤ng": "hai-phong", "H·∫≠u Giang": "hau-giang", "H√≤a B√¨nh": "hoa-binh", "H∆∞ng Y√™n": "hung-yen",
    "Kh√°nh H√≤a": "khanh-hoa", "Ki√™n Giang": "kien-giang", "Kon Tum": "kon-tum", "Lai Ch√¢u": "lai-chau",
    "L√¢m ƒê·ªìng": "lam-dong", "L·∫°ng S∆°n": "lang-son", "L√†o Cai": "lao-cai", "Long An": "long-an",
    "Nam ƒê·ªãnh": "nam-dinh", "Ngh·ªá An": "nghe-an", "Ninh B√¨nh": "ninh-binh", "Ninh Thu·∫≠n": "ninh-thuan",
    "Ph√∫ Th·ªç": "phu-tho", "Ph√∫ Y√™n": "phu-yen", "Qu·∫£ng B√¨nh": "quang-binh", "Qu·∫£ng Nam": "quang-nam",
    "Qu·∫£ng Ng√£i": "quang-ngai", "Qu·∫£ng Ninh": "quang-ninh", "Qu·∫£ng Tr·ªã": "quang-tri", "S√≥c TrƒÉng": "soc-trang",
    "S∆°n La": "son-la", "T√¢y Ninh": "tay-ninh", "Th√°i B√¨nh": "thai-binh", "Th√°i Nguy√™n": "thai-nguyen",
    "Thanh H√≥a": "thanh-hoa", "Th·ª´a Thi√™n Hu·∫ø": "thua-thien-hue", "Ti·ªÅn Giang": "tien-giang",
    "TP. H·ªì Ch√≠ Minh": "ho-chi-minh", "Tr√† Vinh": "tra-vinh", "Tuy√™n Quang": "tuyen-quang",
    "Vƒ©nh Long": "vinh-long", "Vƒ©nh Ph√∫c": "vinh-phuc", "Y√™n B√°i": "yen-bai"
}
USERS_FILE = "users.json"
WATCHLIST_FILE = "watchlist.json"
HISTORY_FILE = "history.json"

# ==============================
# AUTHENTICATION
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    # N·∫øu ch∆∞a c√≥ file th√¨ t·∫°o user admin m·∫∑c ƒë·ªãnh
    admin_hash = bcrypt.hashpw("123456".encode(), bcrypt.gensalt()).decode()
    users = {"admin": admin_hash}
    save_json_file(USERS_FILE, users)
    return users

def verify_user(username, password):
    users = load_users()
    if username in users:
        hashed_pw = users[username].encode("utf-8")
        return bcrypt.checkpw(password.encode("utf-8"), hashed_pw)
    return False

def save_json_file(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_json_file(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

# ==============================
# FETCH DATA
def fetch_announcements(month, year, province_slug):
    url = f"{BASE_URL}/thang-{month}/{year}-{province_slug}"
    rows = []
    try:
        resp = requests.get(url, timeout=10, verify=False)
        soup = BeautifulSoup(resp.text, "html.parser")
        for li in soup.find_all("li"):
            h3 = li.find("h3")
            if not h3:
                continue
            a = h3.find("a")
            name = a.get_text(strip=True)
            href = a["href"]
            link = href if href.startswith("http") else BASE_URL + "/" + href.lstrip("/")
            div = li.find("div")
            if div and "M√£ s·ªë thu·∫ø:" in div.text:
                addr, tax = div.get_text(" ", strip=True).split("M√£ s·ªë thu·∫ø:", 1)
                rows.append({
                    "T√™n doanh nghi·ªáp": name,
                    "M√£ s·ªë thu·∫ø": tax.strip(),
                    "ƒê·ªãa ch·ªâ": addr.replace("ƒê·ªãa ch·ªâ:", "").strip(),
                    "Link": link
                })
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
    return pd.DataFrame(rows)

def fetch_detail(link):
    try:
        resp = requests.get(link, timeout=10, verify=False)
        soup = BeautifulSoup(resp.text, "html.parser")
        content_lines = []
        h1 = soup.find("h1")
        if h1:
            content_lines.append(f"**T√™n doanh nghi·ªáp:** {h1.get_text(strip=True)}")
        for li in soup.find_all("li"):
            text = li.get_text(" ", strip=True)
            icon = li.find("i")
            if not icon:
                continue
            cls = icon.get("class", [])
            if "fa-hashtag" in cls:
                content_lines.append(f"**M√£ s·ªë thu·∫ø:** {text.replace('M√£ s·ªë thu·∫ø:', '').strip()}")
            elif "fa-map-marker" in cls:
                content_lines.append(f"**ƒê·ªãa ch·ªâ thu·∫ø:** {text.replace('ƒê·ªãa ch·ªâ thu·∫ø:', '').strip()}")
            elif "fa-user-o" in cls:
                a = li.find("a")
                if a:
                    content_lines.append(f"**ƒê·∫°i di·ªán ph√°p lu·∫≠t:** {a.get_text(strip=True)}")
            elif "fa-phone" in cls:
                content_lines.append(f"**ƒêi·ªán tho·∫°i:** {text.replace('ƒêi·ªán tho·∫°i:', '').strip()}")
            elif "fa-calendar" in cls:
                content_lines.append(f"**Ng√†y c·∫•p:** {text.replace('Ng√†y c·∫•p:', '').strip()}")
            elif "fa-anchor" in cls:
                content_lines.append(f"**Ng√†nh ngh·ªÅ ch√≠nh:** {text.replace('Ng√†nh ngh·ªÅ ch√≠nh:', '').strip()}")
        return "\n\n".join(content_lines)
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói khi t·∫£i chi ti·∫øt: {e}"

# ==============================
# UI COMPONENTS
def show_login():
    st.title("üîí ƒêƒÉng nh·∫≠p")
    username = st.text_input("T√™n ƒëƒÉng nh·∫≠p")
    password = st.text_input("M·∫≠t kh·∫©u", type="password")
    if st.button("ƒêƒÉng nh·∫≠p"):
        if verify_user(username, password):
            st.session_state["logged_in"] = True
            st.session_state["username"] = username
            st.success(f"‚úÖ Xin ch√†o {username}!")
            st.rerun()
        else:
            st.error("‚ùå Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u")

def tra_cuu_tab():
    st.header("üìä Tra c·ª©u doanh nghi·ªáp")
    start_month = st.selectbox("T·ª´ th√°ng", [f"{i:02d}" for i in range(1, 13)], key="start_month")
    start_year = st.selectbox("T·ª´ nƒÉm", [str(y) for y in range(2020, 2031)], key="start_year")
    end_month = st.selectbox("ƒê·∫øn th√°ng", [f"{i:02d}" for i in range(1, 13)], key="end_month")
    end_year = st.selectbox("ƒê·∫øn nƒÉm", [str(y) for y in range(2020, 2031)], key="end_year")

    provinces = st.multiselect("Ch·ªçn t·ªânh/TP", list(PROVINCES.keys()), help="Ch·ªâ ch·ªçn t·ªëi ƒëa 2 t·ªânh")
    if len(provinces) > 2:
        st.warning("‚ö†Ô∏è Ch·ªâ ch·ªçn t·ªëi ƒëa 2 t·ªânh")

    thread_count = st.slider("S·ªë lu·ªìng x·ª≠ l√Ω", 1, 10, 5)

    if st.button("üîç Tra c·ª©u"):
        if not provinces:
            st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 t·ªânh")
        else:
            results = []
            with ThreadPoolExecutor(max_workers=thread_count) as executor:
                futures = [
                    executor.submit(fetch_announcements, start_month, start_year, PROVINCES[p])
                    for p in provinces
                ]
                for f in futures:
                    df = f.result()
                    if not df.empty:
                        results.append(df)

            if results:
                final_df = pd.concat(results, ignore_index=True)
                st.session_state["search_results"] = final_df
                st.success(f"‚úÖ ƒê√£ t√¨m th·∫•y {len(final_df)} doanh nghi·ªáp")
                st.dataframe(final_df, use_container_width=True)

                selected = st.selectbox("üîó Ch·ªçn doanh nghi·ªáp ƒë·ªÉ xem chi ti·∫øt", final_df["T√™n doanh nghi·ªáp"])
                selected_row = final_df[final_df["T√™n doanh nghi·ªáp"] == selected].iloc[0]
                detail = fetch_detail(selected_row["Link"])
                st.markdown(detail)

                if st.button("‚ûï Th√™m v√†o danh s√°ch theo d√µi"):
                    watchlist = load_json_file(WATCHLIST_FILE)
                    if any(item["M√£ s·ªë thu·∫ø"] == selected_row["M√£ s·ªë thu·∫ø"] for item in watchlist):
                        st.info("Doanh nghi·ªáp ƒë√£ c√≥ trong danh s√°ch theo d√µi")
                    else:
                        watchlist.append(selected_row.to_dict())
                        save_json_file(WATCHLIST_FILE, watchlist)
                        st.success("‚úÖ ƒê√£ th√™m v√†o danh s√°ch theo d√µi")

                history = load_json_file(HISTORY_FILE)
                entry = {"from": (start_month, start_year), "to": (end_month, end_year), "provinces": provinces}
                history.insert(0, entry)
                save_json_file(HISTORY_FILE, history)

                st.download_button("üíæ T·∫£i Excel", final_df.to_csv(index=False).encode("utf-8"), "tra_cuu.csv")
            else:
                st.info("‚ùå Kh√¥ng t√¨m th·∫•y doanh nghi·ªáp")

    # L·ªãch s·ª≠ tra c·ª©u
    history = load_json_file(HISTORY_FILE)
    if history:
        st.markdown("### üìñ L·ªãch s·ª≠ tra c·ª©u")
        for i, entry in enumerate(history[:5]):
            st.write(f"{i+1}. {entry['from'][0]}/{entry['from'][1]} ‚Üí {entry['to'][0]}/{entry['to'][1]} - {', '.join(entry['provinces'])}")

def theo_doi_tab():
    st.header("üëÅÔ∏è Theo d√µi doanh nghi·ªáp")
    watchlist = load_json_file(WATCHLIST_FILE)

    if watchlist:
        df_watch = pd.DataFrame(watchlist)
        selected = st.selectbox("üîó Ch·ªçn doanh nghi·ªáp ƒë·ªÉ xem chi ti·∫øt", df_watch["T√™n doanh nghi·ªáp"])
        selected_row = df_watch[df_watch["T√™n doanh nghi·ªáp"] == selected].iloc[0]
        detail = fetch_detail(selected_row["Link"])
        st.markdown(detail)

        note = st.text_area("üìù Ghi ch√∫", value=selected_row.get("Ghi ch√∫", ""))
        if st.button("üíæ L∆∞u ghi ch√∫"):
            for i, item in enumerate(watchlist):
                if item["M√£ s·ªë thu·∫ø"] == selected_row["M√£ s·ªë thu·∫ø"]:
                    watchlist[i]["Ghi ch√∫"] = note
            save_json_file(WATCHLIST_FILE, watchlist)
            st.success("‚úÖ ƒê√£ l∆∞u ghi ch√∫")

        if st.button("üóëÔ∏è Xo√° doanh nghi·ªáp n√†y"):
            watchlist = [item for item in watchlist if item["M√£ s·ªë thu·∫ø"] != selected_row["M√£ s·ªë thu·∫ø"]]
            save_json_file(WATCHLIST_FILE, watchlist)
            st.success("‚úÖ ƒê√£ xo√° kh·ªèi danh s√°ch")
            st.rerun()

        st.download_button("üíæ T·∫£i Excel", df_watch.to_csv(index=False).encode("utf-8"), "theo_doi.csv")
    else:
        st.info("üì≠ Danh s√°ch theo d√µi tr·ªëng")

# ==============================
# MAIN APP
def main_app():
    st.sidebar.title(f"Xin ch√†o, {st.session_state['username']}")
    page = st.sidebar.radio("üìÇ Menu", ["Tra c·ª©u doanh nghi·ªáp", "Theo d√µi doanh nghi·ªáp"])
    if page == "Tra c·ª©u doanh nghi·ªáp":
        tra_cuu_tab()
    elif page == "Theo d√µi doanh nghi·ªáp":
        theo_doi_tab()
    if st.sidebar.button("üö™ ƒêƒÉng xu·∫•t"):
        st.session_state.clear()
        st.rerun()

# ==============================
# ENTRY POINT
if "logged_in" not in st.session_state:
    show_login()
else:
    main_app()
